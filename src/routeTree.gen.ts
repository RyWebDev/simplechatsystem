/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TryImport } from './routes/try'
import { Route as AboutImport } from './routes/about'
import { Route as LayoutImport } from './routes/_layout'
import { Route as GuestImport } from './routes/_guest'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const LayoutChatsLazyImport = createFileRoute('/_layout/chats')()
const LayoutChatboxLazyImport = createFileRoute('/_layout/chatbox')()
const GuestLoginLazyImport = createFileRoute('/_guest/login')()
const LayoutChatsUserIdLazyImport = createFileRoute('/_layout/chats-user/$id')()

// Create/Update Routes

const TryRoute = TryImport.update({
  id: '/try',
  path: '/try',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const GuestRoute = GuestImport.update({
  id: '/_guest',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutChatsLazyRoute = LayoutChatsLazyImport.update({
  id: '/chats',
  path: '/chats',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./routes/_layout.chats.lazy').then((d) => d.Route))

const LayoutChatboxLazyRoute = LayoutChatboxLazyImport.update({
  id: '/chatbox',
  path: '/chatbox',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.chatbox.lazy').then((d) => d.Route),
)

const GuestLoginLazyRoute = GuestLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRoute,
} as any).lazy(() => import('./routes/_guest.login.lazy').then((d) => d.Route))

const LayoutChatsUserIdLazyRoute = LayoutChatsUserIdLazyImport.update({
  id: '/chats-user/$id',
  path: '/chats-user/$id',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.chats-user.$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/try': {
      id: '/try'
      path: '/try'
      fullPath: '/try'
      preLoaderRoute: typeof TryImport
      parentRoute: typeof rootRoute
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginLazyImport
      parentRoute: typeof GuestImport
    }
    '/_layout/chatbox': {
      id: '/_layout/chatbox'
      path: '/chatbox'
      fullPath: '/chatbox'
      preLoaderRoute: typeof LayoutChatboxLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/chats': {
      id: '/_layout/chats'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof LayoutChatsLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/chats-user/$id': {
      id: '/_layout/chats-user/$id'
      path: '/chats-user/$id'
      fullPath: '/chats-user/$id'
      preLoaderRoute: typeof LayoutChatsUserIdLazyImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface GuestRouteChildren {
  GuestLoginLazyRoute: typeof GuestLoginLazyRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestLoginLazyRoute: GuestLoginLazyRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

interface LayoutRouteChildren {
  LayoutChatboxLazyRoute: typeof LayoutChatboxLazyRoute
  LayoutChatsLazyRoute: typeof LayoutChatsLazyRoute
  LayoutChatsUserIdLazyRoute: typeof LayoutChatsUserIdLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutChatboxLazyRoute: LayoutChatboxLazyRoute,
  LayoutChatsLazyRoute: LayoutChatsLazyRoute,
  LayoutChatsUserIdLazyRoute: LayoutChatsUserIdLazyRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/try': typeof TryRoute
  '/login': typeof GuestLoginLazyRoute
  '/chatbox': typeof LayoutChatboxLazyRoute
  '/chats': typeof LayoutChatsLazyRoute
  '/chats-user/$id': typeof LayoutChatsUserIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/try': typeof TryRoute
  '/login': typeof GuestLoginLazyRoute
  '/chatbox': typeof LayoutChatboxLazyRoute
  '/chats': typeof LayoutChatsLazyRoute
  '/chats-user/$id': typeof LayoutChatsUserIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_guest': typeof GuestRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/try': typeof TryRoute
  '/_guest/login': typeof GuestLoginLazyRoute
  '/_layout/chatbox': typeof LayoutChatboxLazyRoute
  '/_layout/chats': typeof LayoutChatsLazyRoute
  '/_layout/chats-user/$id': typeof LayoutChatsUserIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/try'
    | '/login'
    | '/chatbox'
    | '/chats'
    | '/chats-user/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/try'
    | '/login'
    | '/chatbox'
    | '/chats'
    | '/chats-user/$id'
  id:
    | '__root__'
    | '/'
    | '/_guest'
    | '/_layout'
    | '/about'
    | '/try'
    | '/_guest/login'
    | '/_layout/chatbox'
    | '/_layout/chats'
    | '/_layout/chats-user/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GuestRoute: typeof GuestRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
  TryRoute: typeof TryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GuestRoute: GuestRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
  AboutRoute: AboutRoute,
  TryRoute: TryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_guest",
        "/_layout",
        "/about",
        "/try"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_guest": {
      "filePath": "_guest.tsx",
      "children": [
        "/_guest/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/chatbox",
        "/_layout/chats",
        "/_layout/chats-user/$id"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/try": {
      "filePath": "try.tsx"
    },
    "/_guest/login": {
      "filePath": "_guest.login.lazy.tsx",
      "parent": "/_guest"
    },
    "/_layout/chatbox": {
      "filePath": "_layout.chatbox.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/chats": {
      "filePath": "_layout.chats.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/chats-user/$id": {
      "filePath": "_layout.chats-user.$id.lazy.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
